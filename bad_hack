#pragma once
#include "radio.hpp"
#include "system.hpp"
#include "uv_k5_display.hpp"

typedef unsigned char u8;
typedef signed short i16;
typedef unsigned short u16;
typedef signed int i32;
typedef unsigned int u32;
typedef signed long long i64;
typedef unsigned long long u64;

template <const System::TOrgFunctions &Fw, const System::TOrgData &FwData,
          Radio::CBK4819<Fw> &RadioDriver>
class CSpectrum {
  public:
    static constexpr auto ExitKey = 13;
    static constexpr auto DrawingEndY = 42;
    static constexpr auto BarPos = 5 * 128;

    u8 rssiHistory[128] = {};
    u8 measurementsCount = 32;
    u8 rssiMin = 255;
    u8 highestPeakX = 0;
    u8 highestPeakT = 0;
    u8 highestPeakRssi = 0;
    u32 highestPeakF = 0;
    u32 FStart;
    char square[10] = { 'o', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    char myArray[4] = { 0x00, 0x11, 0x22 };

    CSpectrum()
      : DisplayBuff(FwData.pDisplayBuffer), FontBigNr(FwData.pSmallDigs),
        Display(DisplayBuff), scanDelay(800), sampleZoom(2), scanStep(25_KHz),
        frequencyChangeStep(100_KHz), rssiTriggerLevel(65) {
      Display.SetFont(&FontBigNr);
    };

    inline bool ListenPeak() {
      return true;
    }

    inline void Scan() {

    }

    inline void DrawSpectrum() {
      Display.DrawLine(0, 128, 18);
      Display.DrawLine(0, 128, 36);
      Display.DrawHLine(0, 56, 42);
      Display.DrawHLine(0, 56, 85);
    }

    inline void DrawNums1(u8 xx,u8 yy) {
       if (highestPeakT==0) {         Display.SetCoursorXY(xx, yy);
      Display.PrintFixedDigitsNumber2(1,0);
       highestPeakT=1;
  }

       if (highestPeakT==1) {         Display.SetCoursorXY(xx, yy);
      Display.PrintFixedDigitsNumber2(2,0);
       highestPeakT=0;
  }

    }


    void HandleUserInput() {
      switch (lastButtonPressed) {
        case 1:
          DrawNums1(10,8);
          break;
        case 2:
          DrawNums1(50,8);
          break;
        case 3:
          DrawNums1(90,8);
          break;
        case 4:
          DrawNums1(10,30);
        case 5:
          DrawNums1(50,30);
          break;
        case 6:
          DrawNums1(90,30);
          break;
        case 7:
          break;
        case 8:
          break;
        case 9:
          break;
        case 11: // up
          break;
        case 12: // down
          break;
        case 14: //*
          break;
        case 15: //F
          break;
//          ToggleBacklight();
        default:
          isUserInput = false;
lastButtonPressed=255;

      }
    }

    void SpaceCheck() {



      int checkwin();
      void board();
      int player = 1, i, choice;

      char mark;
      do
      {
        board();
        player = (player % 2) ? 1 : 2;

        //  printf("Player %d, enter a number:  ", player);
        //  scanf("%d", &choice);

        mark = (player == 1) ? 'X' : 'O';

        if (choice == 1 && square[1] == '1')
          square[1] = mark;

        else if (choice == 2 && square[2] == '2')
          square[2] = mark;

        else if (choice == 3 && square[3] == '3')
          square[3] = mark;

        else if (choice == 4 && square[4] == '4')
          square[4] = mark;

        else if (choice == 5 && square[5] == '5')
          square[5] = mark;

        else if (choice == 6 && square[6] == '6')
          square[6] = mark;

        else if (choice == 7 && square[7] == '7')
          square[7] = mark;

        else if (choice == 8 && square[8] == '8')
          square[8] = mark;

        else if (choice == 9 && square[9] == '9')
          square[9] = mark;

        else
        {
          //printf("Invalid move ");

          player--;
          //  getch();
        }
        //        i = checkwin();

        player++;
      } while (i ==  - 1);




      //  return 0;
    }


    int checkwin()
    {
      if (square[1] == square[2] && square[2] == square[3])
        return 1;

      else if (square[4] == square[5] && square[5] == square[6])
        return 1;

      else if (square[7] == square[8] && square[8] == square[9])
        return 1;

      else if (square[1] == square[4] && square[4] == square[7])
        return 1;

      else if (square[2] == square[5] && square[5] == square[8])
        return 1;

      else if (square[3] == square[6] && square[6] == square[9])
        return 1;

      else if (square[1] == square[5] && square[5] == square[9])
        return 1;

      else if (square[3] == square[5] && square[5] == square[7])
        return 1;

      else if (square[1] != '1' && square[2] != '2' && square[3] != '3' &&
               square[4] != '4' && square[5] != '5' && square[6] != '6' && square[7]
               != '7' && square[8] != '8' && square[9] != '9')

        return 0;
      else
        return  - 1;
    }

    void Render() {

      //DisplayBuff.ClearAll();
      DrawSpectrum();
      //DrawNums();

      Fw.FlushFramebufferToScreen();

    }

    void Update() {
      if (bDisplayCleared) {
        //currentFreq = RadioDriver.GetFrequency();
        OnUserInput();

      }
      bDisplayCleared = false;

      HandleUserInput();

      //    if (!ListenPeak())
      //      Scan();
    }



    inline void OnUserInput() {
      isUserInput = true;
      u32 halfOfScanRange = scanStep << (6 - sampleZoom);
      FStart = currentFreq - halfOfScanRange;

      // reset peak
      highestPeakT = 0;
      highestPeakRssi = 0;
      highestPeakX = 64;
      highestPeakF = currentFreq;

      Fw.DelayUs(90000);
    }

    void Handle() {
      if (RadioDriver.IsLockedByOrgFw()) {
        return;
      }

      if (!working) {
        if (IsFlashLightOn()) {
  DisplayBuff.ClearAll();
        u16OldAfSettings = Fw.BK4819Read(0x47);
        Fw.BK4819Write(0x47, 0xFFFF); // mute AF during scan
          working = true;
          TurnOffFlashLight();
        }
        return;
      }

      lastButtonPressed = Fw.PollKeyboard();
      if (lastButtonPressed == ExitKey) {
        working = false;
        RestoreParams();
        return;
      }
      Update();
      Render();
    }

  private:
    void RestoreParams() {
      if (!bDisplayCleared) {
        bDisplayCleared = true;
        DisplayBuff.ClearAll();
        Fw.FlushFramebufferToScreen();
        RadioDriver.SetFrequency(currentFreq);
        Fw.BK4819Write(0x47, u16OldAfSettings); // set previous AF settings
      }
    }

    inline void Listen(u32 duration) {
      Fw.BK4819Write(0x47, u16OldAfSettings);
      for (u8 i = 0; i < 16 && lastButtonPressed == 255; ++i) {
        lastButtonPressed = Fw.PollKeyboard();

        Fw.DelayUs(duration >> 4);
      }
      Fw.BK4819Write(0x47, 0);
    }

    u8 GetRssi(u32 f) {
      RadioDriver.SetFrequency(f);
      Fw.DelayUs(scanDelay);
      return Fw.BK4819Read(0x67);
    }

    inline bool IsFlashLightOn() {
      return GPIOC->DATA & GPIO_PIN_3;
    }
    inline void TurnOffFlashLight() {
      GPIOC->DATA &= ~GPIO_PIN_3;
      *FwData.p8FlashLightStatus = 3;
    }

    inline void ToggleBacklight() {
      GPIOB->DATA ^= GPIO_PIN_6;
    }

    inline u8 Rssi2Y(u8 rssi) {
      return clamp(DrawingEndY - (rssi - rssiMin), 1, DrawingEndY);
    }

    inline i32 clamp(i32 v, i32 min, i32 max) {
      if (v < min)
        return min;
      if (v > max)
        return max;
      return v;
    }

    inline u32 modulo(u32 num, u32 div) {
      while (num >= div)
        num -= div;
      return num;
    }

    TUV_K5Display DisplayBuff;
    const TUV_K5BigNumbers FontBigNr;
    CDisplay<const TUV_K5Display> Display;

    u8 lastButtonPressed;
    u32 currentFreq;
    u16 u16OldAfSettings;

    u16 scanDelay;
    u8 sampleZoom;
    u32 scanStep;
    u32 frequencyChangeStep;
    u8 rssiTriggerLevel;

    bool working = false;
    bool isUserInput = false;
    bool bDisplayCleared = true;

};
